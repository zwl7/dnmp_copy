{"version":3,"file":"route.js","sources":["../../../../src/interceptors/route.ts"],"sourcesContent":["import { useUserStore } from '@/store'\nimport { getNeedLoginPages, needLoginPages as _needLoginPages } from '@/utils'\n\nconst loginRoute = '/pages/login/index'\n\nconst isLogined = () => {\n  const userStore = useUserStore()\n  return userStore.isLogin\n}\n\nconst isDev = import.meta.env.DEV\nconst navigateToInterceptor = {\n  invoke({ url }: { url: string }) {\n    const path = url.split('?')[0]\n    let needLoginPages: string[] = []\n    if (isDev) {\n      needLoginPages = getNeedLoginPages()\n    } else {\n      needLoginPages = _needLoginPages\n    }\n    const isNeedLogin = needLoginPages.includes(path)\n    if (!isNeedLogin) {\n      return true\n    }\n    const hasLogin = isLogined()\n    if (hasLogin) {\n      return true\n    }\n    const redirectRoute = `${loginRoute}?redirect=${encodeURIComponent(url)}`\n    uni.navigateTo({ url: redirectRoute })\n    return false\n  },\n}\n\nexport const routeInterceptor = {\n  install() {\n    uni.addInterceptor('navigateTo', navigateToInterceptor)\n    uni.addInterceptor('reLaunch', navigateToInterceptor)\n    uni.addInterceptor('redirectTo', navigateToInterceptor)\n    uni.addInterceptor('switchTab', navigateToInterceptor)\n  },\n}\n"],"names":["useUserStore","getNeedLoginPages","uni"],"mappings":";;;;;;AAGA,MAAM,aAAa;AAEnB,MAAM,YAAY,MAAM;AACtB,QAAM,YAAYA,iBAAAA,aAAa;AAC/B,SAAO,UAAU;AACnB;AAGA,MAAM,wBAAwB;AAAA,EAC5B,OAAO,EAAE,OAAwB;AAC/B,UAAM,OAAO,IAAI,MAAM,GAAG,EAAE,CAAC;AAC7B,QAAI,iBAA2B,CAAC;AACrB;AACT,uBAAiBC,YAAAA,kBAAkB;AAAA,IAAA;AAI/B,UAAA,cAAc,eAAe,SAAS,IAAI;AAChD,QAAI,CAAC,aAAa;AACT,aAAA;AAAA,IAAA;AAET,UAAM,WAAW,UAAU;AAC3B,QAAI,UAAU;AACL,aAAA;AAAA,IAAA;AAET,UAAM,gBAAgB,GAAG,UAAU,aAAa,mBAAmB,GAAG,CAAC;AACvEC,kBAAAA,MAAI,WAAW,EAAE,KAAK,cAAA,CAAe;AAC9B,WAAA;AAAA,EAAA;AAEX;AAEO,MAAM,mBAAmB;AAAA,EAC9B,UAAU;AACJA,wBAAA,eAAe,cAAc,qBAAqB;AAClDA,wBAAA,eAAe,YAAY,qBAAqB;AAChDA,wBAAA,eAAe,cAAc,qBAAqB;AAClDA,wBAAA,eAAe,aAAa,qBAAqB;AAAA,EAAA;AAEzD;;"}