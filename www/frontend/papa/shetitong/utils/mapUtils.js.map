{"version":3,"file":"mapUtils.js","sources":["../../../../src/utils/mapUtils.ts"],"sourcesContent":["var DEF_PI = 3.14159265359 // PI\nvar DEF_2PI = 6.28318530712 // 2*PI\nvar DEF_PI180 = 0.01745329252 // PI/180.0\nvar DEF_R = 6370693.5 // radius of earth\nexport function getShortDistanceBase(lat1, lon1, lat2, lon2) {\n  var ew1, ns1, ew2, ns2\n  var dx, dy, dew\n  var distance\n  // 角度转换为弧度\n  ew1 = lon1 * DEF_PI180\n  ns1 = lat1 * DEF_PI180\n  ew2 = lon2 * DEF_PI180\n  ns2 = lat2 * DEF_PI180\n  // 经度差\n  dew = ew1 - ew2\n  // 若跨东经和西经180 度，进行调整\n  if (dew > DEF_PI) {\n    dew = DEF_2PI - dew\n  } else if (dew < -DEF_PI) {\n    dew = DEF_2PI + dew\n  }\n  dx = DEF_R * Math.cos(ns1) * dew // 东西方向长度(在纬度圈上的投影长度)\n  dy = DEF_R * (ns1 - ns2) // 南北方向长度(在经度圈上的投影长度)\n  // 勾股定理求斜边长\n  distance = Number(Math.sqrt(dx * dx + dy * dy).toFixed(0))\n  return distance\n}\nexport function getShortDistance(lat1, lon1, lat2, lon2) {\n  let distance = getShortDistanceBase(lat1, lon1, lat2, lon2)\n  distance = distance / 1000\n  return Math.floor(distance)\n}\n"],"names":[],"mappings":";AAAA,IAAI,SAAS;AACb,IAAI,UAAU;AACd,IAAI,YAAY;AAChB,IAAI,QAAQ;AACL,SAAS,qBAAqB,MAAM,MAAM,MAAM,MAAM;AACvD,MAAA,KAAK,KAAK,KAAK;AACnB,MAAI,IAAI,IAAI;AACR,MAAA;AAEJ,QAAM,OAAO;AACb,QAAM,OAAO;AACb,QAAM,OAAO;AACb,QAAM,OAAO;AAEb,QAAM,MAAM;AAEZ,MAAI,MAAM,QAAQ;AAChB,UAAM,UAAU;AAAA,EAAA,WACP,MAAM,CAAC,QAAQ;AACxB,UAAM,UAAU;AAAA,EAAA;AAElB,OAAK,QAAQ,KAAK,IAAI,GAAG,IAAI;AAC7B,OAAK,SAAS,MAAM;AAET,aAAA,OAAO,KAAK,KAAK,KAAK,KAAK,KAAK,EAAE,EAAE,QAAQ,CAAC,CAAC;AAClD,SAAA;AACT;;"}