{"version":3,"file":"uv-datetime-picker.js","sources":["../../../../../../../../node_modules/@climblee/uv-ui/components/uv-datetime-picker/uv-datetime-picker.vue","../../../../../../../../uniComponent:/L1VzZXJzL2d1b3hpYW9taW5nL2NvZGUvcGFwYS1jb2RlL3BtLXluL3VuaWFwcC1zb2NpYWwtc3BvcnRzLW5ldy9ub2RlX21vZHVsZXMvQGNsaW1ibGVlL3V2LXVpL2NvbXBvbmVudHMvdXYtZGF0ZXRpbWUtcGlja2VyL3V2LWRhdGV0aW1lLXBpY2tlci52dWU"],"sourcesContent":["<template>\r\n\t<uv-picker\r\n\t\tref=\"picker\"\r\n\t\t:closeOnClickOverlay=\"closeOnClickOverlay\"\r\n\t\t:closeOnClickConfirm=\"closeOnClickConfirm\"\r\n\t\t:columns=\"columns\"\r\n\t\t:title=\"title\"\r\n\t\t:itemHeight=\"itemHeight\"\r\n\t\t:showToolbar=\"showToolbar\"\r\n\t\t:visibleItemCount=\"visibleItemCount\"\r\n\t\t:defaultIndex=\"innerDefaultIndex\"\r\n\t\t:cancelText=\"cancelText\"\r\n\t\t:confirmText=\"confirmText\"\r\n\t\t:cancelColor=\"cancelColor\"\r\n\t\t:confirmColor=\"confirmColor\"\r\n\t\t:round=\"round\"\r\n\t\t@close=\"close\"\r\n\t\t@cancel=\"cancel\"\r\n\t\t@confirm=\"confirm\"\r\n\t\t@change=\"change\"\r\n\t>\r\n\t</uv-picker>\r\n</template>\r\n<script>\r\n\tfunction times(n, iteratee) {\r\n\t\tlet index = -1\r\n\t\tconst result = Array(n < 0 ? 0 : n)\r\n\t\twhile (++index < n) {\r\n\t\t\tresult[index] = iteratee(index)\r\n\t\t}\r\n\t\treturn result\r\n\t}\r\n\timport mpMixin from '../../libs/mixin/mpMixin.js'\r\n\timport mixin from '../../libs/mixin/mixin.js'\r\n\timport props from './props.js';\r\n\timport dayjs from '../../libs/util/dayjs.js'\r\n\t/**\r\n\t * DatetimePicker 时间日期选择器\r\n\t * @description 此选择器用于时间日期\r\n\t * @tutorial https://www.uvui.cn/components/datetimePicker.html\r\n\t * @property {Boolean}\t\t\tshowToolbar\t\t\t是否显示顶部的操作栏  ( 默认 true )\r\n\t * @property {String | Number}\tvalue\t\t\t\t绑定值\r\n\t * @property {String}\t\t\ttitle\t\t\t\t顶部标题\r\n\t * @property {String}\t\t\tmode\t\t\t\t展示格式 mode=date为日期选择，mode=time为时间选择，mode=year-month为年月选择，mode=datetime为日期时间选择  ( 默认 ‘datetime )\r\n\t * @property {Number}\t\t\tmaxDate\t\t\t\t可选的最大时间  默认值为后10年\r\n\t * @property {Number}\t\t\tminDate\t\t\t\t可选的最小时间  默认值为前10年\r\n\t * @property {Number}\t\t\tminHour\t\t\t\t可选的最小小时，仅mode=time有效   ( 默认 0 )\r\n\t * @property {Number}\t\t\tmaxHour\t\t\t\t可选的最大小时，仅mode=time有效\t  ( 默认 23 )\r\n\t * @property {Number}\t\t\tminMinute\t\t\t可选的最小分钟，仅mode=time有效\t  ( 默认 0 )\r\n\t * @property {Number}\t\t\tmaxMinute\t\t\t可选的最大分钟，仅mode=time有效   ( 默认 59 )\r\n\t * @property {Function}\t\t\tfilter\t\t\t\t选项过滤函数\r\n\t * @property {Function}\t\t\tformatter\t\t\t选项格式化函数\r\n\t * @property {Boolean}\t\t\tloading\t\t\t\t是否显示加载中状态   ( 默认 false )\r\n\t * @property {String | Number}\titemHeight\t\t\t各列中，单个选项的高度   ( 默认 44 )\r\n\t * @property {String}\t\t\tcancelText\t\t\t取消按钮的文字  ( 默认 '取消' )\r\n\t * @property {String}\t\t\tconfirmText\t\t\t确认按钮的文字  ( 默认 '确认' )\r\n\t * @property {String}\t\t\tcancelColor\t\t\t取消按钮的颜色  ( 默认 '#909193' )\r\n\t * @property {String}\t\t\tconfirmColor\t\t确认按钮的颜色  ( 默认 '#3c9cff' )\r\n\t * @property {String | Number}\tvisibleItemCount\t每列中可见选项的数量  ( 默认 5 )\r\n\t * @property {Boolean}\t\t\tcloseOnClickOverlay\t是否允许点击遮罩关闭选择器  ( 默认 true )\r\n\t * @property {String | Number}\tround\t圆角  ( 默认 0 )\r\n\t * @event {Function} close 关闭选择器时触发\r\n\t * @event {Function} confirm 点击确定按钮，返回当前选择的值\r\n\t * @event {Function} change 当选择值变化时触发\r\n\t * @event {Function} cancel 点击取消按钮\r\n\t * @example  <uv-datetime-picker ref=\"datetimepicker\" :value=\"value1\"  mode=\"datetime\" ></uv-datetime-picker>\r\n\t */\r\n\texport default {\r\n\t\tname: 'uv-datetime-picker',\r\n\t\temits: ['close', 'cancel', 'confirm', 'input', 'change', 'update:modelValue'],\r\n\t\tmixins: [mpMixin, mixin, props],\r\n\t\tdata() {\r\n\t\t\treturn {\r\n\t\t\t\tcolumns: [],\r\n\t\t\t\tinnerDefaultIndex: [],\r\n\t\t\t\tinnerFormatter: (type, value) => value\r\n\t\t\t}\r\n\t\t},\r\n\t\twatch: {\r\n\t\t\tpropsChange() {\r\n\t\t\t\tthis.init()\r\n\t\t\t}\r\n\t\t},\r\n\t\tcomputed: {\r\n\t\t\t// 如果以下这些变量发生了变化，意味着需要重新初始化各列的值\r\n\t\t\tpropsChange() {\r\n\t\t\t\tconst propsValue = this.value || this.modelValue;\r\n\t\t\t\treturn [this.mode, this.maxDate, this.minDate, this.minHour, this.maxHour, this.minMinute, this.maxMinute, this.filter, propsValue]\r\n\t\t\t}\r\n\t\t},\r\n\t\tmounted() {\r\n\t\t\tthis.init()\r\n\t\t},\r\n\t\tmethods: {\r\n\t\t\tinit() {\r\n\t\t\t\tthis.getValue();\r\n\t\t\t\tthis.updateColumnValue(this.innerValue)\r\n\t\t\t},\r\n\t\t\tgetValue() {\r\n\t\t\t\tconst propsValue = this.value || this.modelValue;\r\n\t\t\t\tthis.innerValue = this.correctValue(propsValue)\r\n\t\t\t},\r\n\t\t\t// 在微信小程序中，不支持将函数当做props参数，故只能通过ref形式调用\r\n\t\t\tsetFormatter(e) {\r\n\t\t\t\tthis.innerFormatter = e\r\n\t\t\t},\r\n\t\t\topen() {\r\n\t\t\t\tthis.$refs.picker.open();\r\n\t\t\t\tthis.getValue();\r\n\t\t\t\tthis.updateColumnValue(this.innerValue);\r\n\t\t\t},\r\n\t\t\tclose() {\r\n\t\t\t\tthis.$emit('close');\r\n\t\t\t},\r\n\t\t\t// 点击工具栏的取消按钮\r\n\t\t\tcancel() {\r\n\t\t\t\tthis.$emit('cancel')\r\n\t\t\t},\r\n\t\t\t// 点击工具栏的确定按钮\r\n\t\t\tconfirm() {\r\n\t\t\t\tthis.$emit('confirm', {\r\n\t\t\t\t\tvalue: this.innerValue,\r\n\t\t\t\t\tmode: this.mode\r\n\t\t\t\t})\r\n\t\t\t\tif(!this.clearDate) {\r\n\t\t\t\t\tthis.$emit('input', this.innerValue)\r\n\t\t\t\t\tthis.$emit('update:modelValue', this.innerValue)\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t//用正则截取输出值,当出现多组数字时,抛出错误\r\n\t\t\tintercept(e, type) {\r\n\t\t\t\tlet judge = e.match(/\\d+/g)\r\n\t\t\t\t//判断是否掺杂数字\r\n\t\t\t\tif (judge.length > 1) {\r\n\t\t\t\t\tthis.$uv.error(\"请勿在过滤或格式化函数时添加数字\")\r\n\t\t\t\t\treturn 0\r\n\t\t\t\t} else if (type && judge[0].length == 4) { //判断是否是年份\r\n\t\t\t\t\treturn judge[0]\r\n\t\t\t\t} else if (judge[0].length > 2) {\r\n\t\t\t\t\tthis.$uv.error(\"请勿在过滤或格式化函数时添加数字\")\r\n\t\t\t\t\treturn 0\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn judge[0]\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t// 列发生变化时触发\r\n\t\t\tchange(e) {\r\n\t\t\t\tconst { indexs, values } = e\r\n\t\t\t\tlet selectValue = ''\r\n\t\t\t\tif (this.mode === 'time') {\r\n\t\t\t\t\t// 根据value各列索引，从各列数组中，取出当前时间的选中值\r\n\t\t\t\t\tselectValue = `${this.intercept(values[0][indexs[0]])}:${this.intercept(values[1][indexs[1]])}`\r\n\t\t\t\t} else if (this.mode === 'year') {\r\n\t\t\t\t\tconst year = parseInt(this.intercept(values[0][indexs[0]], 'year'));\r\n\t\t\t\t\tselectValue = Number(new Date(year, 0));\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// 将选择的值转为数值，比如'03'转为数值的3，'2019'转为数值的2019\r\n\t\t\t\t\tconst year = parseInt(this.intercept(values[0][indexs[0]], 'year'))\r\n\t\t\t\t\tconst month = parseInt(this.intercept(values[1][indexs[1]]))\r\n\t\t\t\t\tlet date = parseInt(values[2] ? this.intercept(values[2][indexs[2]]) : 1)\r\n\t\t\t\t\tlet hour = 0,\r\n\t\t\t\t\t\tminute = 0\r\n\t\t\t\t\t// 此月份的最大天数\r\n\t\t\t\t\tconst maxDate = dayjs(`${year}-${month}`).daysInMonth()\r\n\t\t\t\t\t// year-month模式下，date不会出现在列中，设置为1，为了符合后边需要减1的需求\r\n\t\t\t\t\tif (this.mode === 'year-month') {\r\n\t\t\t\t\t\tdate = 1\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// 不允许超过maxDate值\r\n\t\t\t\t\tdate = Math.min(maxDate, date)\r\n\t\t\t\t\tif (this.mode === 'datetime') {\r\n\t\t\t\t\t\thour = parseInt(this.intercept(values[3][indexs[3]]))\r\n\t\t\t\t\t\tminute = parseInt(this.intercept(values[4][indexs[4]]))\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// 转为时间模式\r\n\t\t\t\t\tselectValue = Number(new Date(year, month - 1, date, hour, minute))\r\n\t\t\t\t}\r\n\t\t\t\t// 取出准确的合法值，防止超越边界的情况\r\n\t\t\t\tselectValue = this.correctValue(selectValue)\r\n\t\t\t\tthis.innerValue = selectValue\r\n\t\t\t\tthis.updateColumnValue(selectValue)\r\n\t\t\t\t// 发出change时间，value为当前选中的时间戳\r\n\t\t\t\tthis.$emit('change', {\r\n\t\t\t\t\tvalue: selectValue,\r\n\t\t\t\t\tmode: this.mode\r\n\t\t\t\t})\r\n\t\t\t},\r\n\t\t\t// 更新各列的值，进行补0、格式化等操作\r\n\t\t\tupdateColumnValue(value) {\r\n\t\t\t\tthis.innerValue = value\r\n\t\t\t\tthis.updateColumns()\r\n\t\t\t\tthis.updateIndexs(value)\r\n\t\t\t},\r\n\t\t\t// 更新索引\r\n\t\t\tupdateIndexs(value) {\r\n\t\t\t\tlet values = []\r\n\t\t\t\tconst formatter = this.formatter || this.innerFormatter;\r\n\t\t\t\tif (this.mode === 'time') {\r\n\t\t\t\t\t// 将time模式的时间用:分隔成数组\r\n\t\t\t\t\tconst timeArr = value.split(':')\r\n\t\t\t\t\t// 使用formatter格式化方法进行管道处理\r\n\t\t\t\t\tvalues = [formatter('hour', timeArr[0]), formatter('minute', timeArr[1])]\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst date = new Date(value)\r\n\t\t\t\t\tvalues = [\r\n\t\t\t\t\t\tformatter('year', `${dayjs(value).year()}`),\r\n\t\t\t\t\t\t// 月份补0\r\n\t\t\t\t\t\tformatter('month', this.$uv.padZero(dayjs(value).month() + 1))\r\n\t\t\t\t\t]\r\n\t\t\t\t\tif (this.mode === 'date') {\r\n\t\t\t\t\t\t// date模式，需要添加天列\r\n\t\t\t\t\t\tvalues.push(formatter('day', this.$uv.padZero(dayjs(value).date())))\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.mode === 'datetime') {\r\n\t\t\t\t\t\t// 数组的push方法，可以写入多个参数\r\n\t\t\t\t\t\tvalues.push(formatter('day', this.$uv.padZero(dayjs(value).date())), formatter('hour', this.$uv.padZero(dayjs(value).hour())), formatter('minute', this.$uv.padZero(dayjs(value).minute())))\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// 根据当前各列的所有值，从各列默认值中找到默认值在各列中的索引\r\n\t\t\t\tconst indexs = this.columns.map((column, index) => {\r\n\t\t\t\t\t// 通过取大值，可以保证不会出现找不到索引的-1情况\r\n\t\t\t\t\treturn Math.max(0, column.findIndex(item => item === values[index]))\r\n\t\t\t\t})\r\n\t\t\t\tthis.$nextTick(()=>{\r\n\t\t\t\t\tthis.$uv.sleep(100).then(res=>{\r\n\t\t\t\t\t\tthis.$refs.picker.setIndexs(indexs,true);\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t},\r\n\t\t\t// 更新各列的值\r\n\t\t\tupdateColumns() {\r\n\t\t\t\tconst formatter = this.formatter || this.innerFormatter\r\n\t\t\t\t// 获取各列的值，并且map后，对各列的具体值进行补0操作\r\n\t\t\t\tconst results = this.getOriginColumns().map((column) => column.values.map((value) => formatter(column.type, value)))\r\n\t\t\t\tthis.columns = results\r\n\t\t\t},\r\n\t\t\tgetOriginColumns() {\r\n\t\t\t\t// 生成各列的值\r\n\t\t\t\tconst results = this.getRanges().map(({ type, range }) => {\r\n\t\t\t\t\tlet values = times(range[1] - range[0] + 1, (index) => {\r\n\t\t\t\t\t\tlet value = range[0] + index\r\n\t\t\t\t\t\tvalue = type === 'year' ? `${value}` : this.$uv.padZero(value)\r\n\t\t\t\t\t\treturn value\r\n\t\t\t\t\t})\r\n\t\t\t\t\t// 进行过滤\r\n\t\t\t\t\tif (this.filter) {\r\n\t\t\t\t\t\tvalues = this.filter(type, values)\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn { type, values }\r\n\t\t\t\t})\r\n\t\t\t\treturn results\r\n\t\t\t},\r\n\t\t\t// 通过最大值和最小值生成数组\r\n\t\t\tgenerateArray(start, end) {\r\n\t\t\t\treturn Array.from(new Array(end + 1).keys()).slice(start)\r\n\t\t\t},\r\n\t\t\t// 得出合法的时间\r\n\t\t\tcorrectValue(value) {\r\n\t\t\t\tconst isDateMode = this.mode !== 'time'\r\n\t\t\t\tif (isDateMode && !this.$uv.test.date(value)) {\r\n\t\t\t\t\t// 如果是日期类型，但是又没有设置合法的当前时间的话，使用最小时间为当前时间\r\n\t\t\t\t\tvalue = this.minDate\r\n\t\t\t\t} else if (!isDateMode && !value) {\r\n\t\t\t\t\t// 如果是时间类型，而又没有默认值的话，就用最小时间\r\n\t\t\t\t\tvalue = `${this.$uv.padZero(this.minHour)}:${this.$uv.padZero(this.minMinute)}`\r\n\t\t\t\t}\r\n\t\t\t\t// 时间类型\r\n\t\t\t\tif (!isDateMode) {\r\n\t\t\t\t\tif (String(value).indexOf(':') === -1) return this.$uv.error('时间错误，请传递如12:24的格式')\r\n\t\t\t\t\tlet [hour, minute] = value.split(':')\r\n\t\t\t\t\t// 对时间补零，同时控制在最小值和最大值之间\r\n\t\t\t\t\thour = this.$uv.padZero(this.$uv.range(this.minHour, this.maxHour, Number(hour)))\r\n\t\t\t\t\tminute = this.$uv.padZero(this.$uv.range(this.minMinute, this.maxMinute, Number(minute)))\r\n\t\t\t\t\treturn `${ hour }:${ minute }`\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// 如果是日期格式，控制在最小日期和最大日期之间\r\n\t\t\t\t\tvalue = dayjs(value).isBefore(dayjs(this.minDate)) ? this.minDate : value\r\n\t\t\t\t\tvalue = dayjs(value).isAfter(dayjs(this.maxDate)) ? this.maxDate : value\r\n\t\t\t\t\treturn value\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t// 获取每列的最大和最小值\r\n\t\t\tgetRanges() {\r\n\t\t\t\tif (this.mode === 'time') {\r\n\t\t\t\t\treturn [{\r\n\t\t\t\t\t\ttype: 'hour',\r\n\t\t\t\t\t\trange: [this.minHour, this.maxHour],\r\n\t\t\t\t\t}, {\r\n\t\t\t\t\t\ttype: 'minute',\r\n\t\t\t\t\t\trange: [this.minMinute, this.maxMinute],\r\n\t\t\t\t\t}, ];\r\n\t\t\t\t}\r\n\t\t\t\tconst { maxYear, maxDate, maxMonth, maxHour, maxMinute, } = this.getBoundary('max', this.innerValue);\r\n\t\t\t\tconst { minYear, minDate, minMonth, minHour, minMinute, } = this.getBoundary('min', this.innerValue);\r\n\t\t\t\tconst result = [{\r\n\t\t\t\t\ttype: 'year',\r\n\t\t\t\t\trange: [minYear, maxYear],\r\n\t\t\t\t}, {\r\n\t\t\t\t\ttype: 'month',\r\n\t\t\t\t\trange: [minMonth, maxMonth],\r\n\t\t\t\t}, {\r\n\t\t\t\t\ttype: 'day',\r\n\t\t\t\t\trange: [minDate, maxDate],\r\n\t\t\t\t}, {\r\n\t\t\t\t\ttype: 'hour',\r\n\t\t\t\t\trange: [minHour, maxHour],\r\n\t\t\t\t}, {\r\n\t\t\t\t\ttype: 'minute',\r\n\t\t\t\t\trange: [minMinute, maxMinute],\r\n\t\t\t\t}, ];\r\n\t\t\t\tif (this.mode === 'date') result.splice(3, 2);\r\n\t\t\t\tif (this.mode === 'year-month') result.splice(2, 3);\r\n\t\t\t\tif (this.mode === 'year') result.splice(1, 4);\r\n\t\t\t\treturn result;\r\n\t\t\t},\r\n\t\t\t// 根据minDate、maxDate、minHour、maxHour等边界值，判断各列的开始和结束边界值\r\n\t\t\tgetBoundary(type, innerValue) {\r\n\t\t\t\tconst value = new Date(innerValue)\r\n\t\t\t\tconst boundary = new Date(this[`${type}Date`])\r\n\t\t\t\tconst year = dayjs(boundary).year()\r\n\t\t\t\tlet month = 1\r\n\t\t\t\tlet date = 1\r\n\t\t\t\tlet hour = 0\r\n\t\t\t\tlet minute = 0\r\n\t\t\t\tif (type === 'max') {\r\n\t\t\t\t\tmonth = 12\r\n\t\t\t\t\t// 月份的天数\r\n\t\t\t\t\tdate = dayjs(value).daysInMonth()\r\n\t\t\t\t\thour = 23\r\n\t\t\t\t\tminute = 59\r\n\t\t\t\t}\r\n\t\t\t\t// 获取边界值，逻辑是：当年达到了边界值(最大或最小年)，就检查月允许的最大和最小值，以此类推\r\n\t\t\t\tif (dayjs(value).year() === year) {\r\n\t\t\t\t\tmonth = dayjs(boundary).month() + 1\r\n\t\t\t\t\tif (dayjs(value).month() + 1 === month) {\r\n\t\t\t\t\t\tdate = dayjs(boundary).date()\r\n\t\t\t\t\t\tif (dayjs(value).date() === date) {\r\n\t\t\t\t\t\t\thour = dayjs(boundary).hour()\r\n\t\t\t\t\t\t\tif (dayjs(value).hour() === hour) {\r\n\t\t\t\t\t\t\t\tminute = dayjs(boundary).minute()\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn {\r\n\t\t\t\t\t[`${type}Year`]: year,\r\n\t\t\t\t\t[`${type}Month`]: month,\r\n\t\t\t\t\t[`${type}Date`]: date,\r\n\t\t\t\t\t[`${type}Hour`]: hour,\r\n\t\t\t\t\t[`${type}Minute`]: minute\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t},\r\n\t}\r\n</script>","import Component from '/Users/guoxiaoming/code/papa-code/pm-yn/uniapp-social-sports-new/node_modules/@climblee/uv-ui/components/uv-datetime-picker/uv-datetime-picker.vue'\nwx.createComponent(Component)"],"names":["mpMixin","mixin","props","dayjs"],"mappings":";;AAwBC,SAAS,MAAM,GAAG,UAAU;AAC3B,MAAI,QAAQ;AACZ,QAAM,SAAS,MAAM,IAAI,IAAI,IAAI,CAAC;AAClC,SAAO,EAAE,QAAQ,GAAG;AACnB,WAAO,KAAK,IAAI,SAAS,KAAK;AAAA,EAC/B;AACA,SAAO;AACR;AAoCA,MAAK,YAAU;AAAA,EACd,MAAM;AAAA,EACN,OAAO,CAAC,SAAS,UAAU,WAAW,SAAS,UAAU,mBAAmB;AAAA,EAC5E,QAAQ,CAACA,cAAAA,SAASC,cAAK,OAAEC,sBAAK;AAAA,EAC9B,OAAO;AACN,WAAO;AAAA,MACN,SAAS,CAAE;AAAA,MACX,mBAAmB,CAAE;AAAA,MACrB,gBAAgB,CAAC,MAAM,UAAU;AAAA,IAClC;AAAA,EACA;AAAA,EACD,OAAO;AAAA,IACN,cAAc;AACb,WAAK,KAAK;AAAA,IACX;AAAA,EACA;AAAA,EACD,UAAU;AAAA;AAAA,IAET,cAAc;AACb,YAAM,aAAa,KAAK,SAAS,KAAK;AACtC,aAAO,CAAC,KAAK,MAAM,KAAK,SAAS,KAAK,SAAS,KAAK,SAAS,KAAK,SAAS,KAAK,WAAW,KAAK,WAAW,KAAK,QAAQ,UAAU;AAAA,IACnI;AAAA,EACA;AAAA,EACD,UAAU;AACT,SAAK,KAAK;AAAA,EACV;AAAA,EACD,SAAS;AAAA,IACR,OAAO;AACN,WAAK,SAAQ;AACb,WAAK,kBAAkB,KAAK,UAAU;AAAA,IACtC;AAAA,IACD,WAAW;AACV,YAAM,aAAa,KAAK,SAAS,KAAK;AACtC,WAAK,aAAa,KAAK,aAAa,UAAU;AAAA,IAC9C;AAAA;AAAA,IAED,aAAa,GAAG;AACf,WAAK,iBAAiB;AAAA,IACtB;AAAA,IACD,OAAO;AACN,WAAK,MAAM,OAAO;AAClB,WAAK,SAAQ;AACb,WAAK,kBAAkB,KAAK,UAAU;AAAA,IACtC;AAAA,IACD,QAAQ;AACP,WAAK,MAAM,OAAO;AAAA,IAClB;AAAA;AAAA,IAED,SAAS;AACR,WAAK,MAAM,QAAQ;AAAA,IACnB;AAAA;AAAA,IAED,UAAU;AACT,WAAK,MAAM,WAAW;AAAA,QACrB,OAAO,KAAK;AAAA,QACZ,MAAM,KAAK;AAAA,OACX;AACD,UAAG,CAAC,KAAK,WAAW;AACnB,aAAK,MAAM,SAAS,KAAK,UAAU;AACnC,aAAK,MAAM,qBAAqB,KAAK,UAAU;AAAA,MAChD;AAAA,IACA;AAAA;AAAA,IAED,UAAU,GAAG,MAAM;AAClB,UAAI,QAAQ,EAAE,MAAM,MAAM;AAE1B,UAAI,MAAM,SAAS,GAAG;AACrB,aAAK,IAAI,MAAM,kBAAkB;AACjC,eAAO;AAAA,MACR,WAAW,QAAQ,MAAM,CAAC,EAAE,UAAU,GAAG;AACxC,eAAO,MAAM,CAAC;AAAA,MACb,WAAS,MAAM,CAAC,EAAE,SAAS,GAAG;AAC/B,aAAK,IAAI,MAAM,kBAAkB;AACjC,eAAO;AAAA,aACD;AACN,eAAO,MAAM,CAAC;AAAA,MACf;AAAA,IACA;AAAA;AAAA,IAED,OAAO,GAAG;AACT,YAAM,EAAE,QAAQ,OAAK,IAAM;AAC3B,UAAI,cAAc;AAClB,UAAI,KAAK,SAAS,QAAQ;AAEzB,sBAAc,GAAG,KAAK,UAAU,OAAO,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,UAAU,OAAO,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;AAAA,iBACnF,KAAK,SAAS,QAAQ;AAChC,cAAM,OAAO,SAAS,KAAK,UAAU,OAAO,CAAC,EAAE,OAAO,CAAC,CAAC,GAAG,MAAM,CAAC;AAClE,sBAAc,OAAO,IAAI,KAAK,MAAM,CAAC,CAAC;AAAA,aAChC;AAEN,cAAM,OAAO,SAAS,KAAK,UAAU,OAAO,CAAC,EAAE,OAAO,CAAC,CAAC,GAAG,MAAM,CAAC;AAClE,cAAM,QAAQ,SAAS,KAAK,UAAU,OAAO,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;AAC3D,YAAI,OAAO,SAAS,OAAO,CAAC,IAAI,KAAK,UAAU,OAAO,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;AACxE,YAAI,OAAO,GACV,SAAS;AAEV,cAAM,UAAUC,cAAK,QAAC,GAAG,IAAI,IAAI,KAAK,EAAE,EAAE,YAAY;AAEtD,YAAI,KAAK,SAAS,cAAc;AAC/B,iBAAO;AAAA,QACR;AAEA,eAAO,KAAK,IAAI,SAAS,IAAI;AAC7B,YAAI,KAAK,SAAS,YAAY;AAC7B,iBAAO,SAAS,KAAK,UAAU,OAAO,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;AACpD,mBAAS,SAAS,KAAK,UAAU,OAAO,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;AAAA,QACvD;AAEA,sBAAc,OAAO,IAAI,KAAK,MAAM,QAAQ,GAAG,MAAM,MAAM,MAAM,CAAC;AAAA,MACnE;AAEA,oBAAc,KAAK,aAAa,WAAW;AAC3C,WAAK,aAAa;AAClB,WAAK,kBAAkB,WAAW;AAElC,WAAK,MAAM,UAAU;AAAA,QACpB,OAAO;AAAA,QACP,MAAM,KAAK;AAAA,OACX;AAAA,IACD;AAAA;AAAA,IAED,kBAAkB,OAAO;AACxB,WAAK,aAAa;AAClB,WAAK,cAAc;AACnB,WAAK,aAAa,KAAK;AAAA,IACvB;AAAA;AAAA,IAED,aAAa,OAAO;AACnB,UAAI,SAAS,CAAC;AACd,YAAM,YAAY,KAAK,aAAa,KAAK;AACzC,UAAI,KAAK,SAAS,QAAQ;AAEzB,cAAM,UAAU,MAAM,MAAM,GAAG;AAE/B,iBAAS,CAAC,UAAU,QAAQ,QAAQ,CAAC,CAAC,GAAG,UAAU,UAAU,QAAQ,CAAC,CAAC,CAAC;AAAA,aAClE;AAEN,iBAAS;AAAA,UACR,UAAU,QAAQ,GAAGA,cAAAA,QAAM,KAAK,EAAE,KAAM,CAAA,EAAE;AAAA;AAAA,UAE1C,UAAU,SAAS,KAAK,IAAI,QAAQA,sBAAM,KAAK,EAAE,UAAU,CAAC,CAAC;AAAA,QAC9D;AACA,YAAI,KAAK,SAAS,QAAQ;AAEzB,iBAAO,KAAK,UAAU,OAAO,KAAK,IAAI,QAAQA,cAAK,QAAC,KAAK,EAAE,KAAI,CAAE,CAAC,CAAC;AAAA,QACpE;AACA,YAAI,KAAK,SAAS,YAAY;AAE7B,iBAAO,KAAK,UAAU,OAAO,KAAK,IAAI,QAAQA,cAAK,QAAC,KAAK,EAAE,KAAM,CAAA,CAAC,GAAG,UAAU,QAAQ,KAAK,IAAI,QAAQA,cAAAA,QAAM,KAAK,EAAE,KAAI,CAAE,CAAC,GAAG,UAAU,UAAU,KAAK,IAAI,QAAQA,cAAK,QAAC,KAAK,EAAE,OAAQ,CAAA,CAAC,CAAC;AAAA,QAC5L;AAAA,MACD;AAEA,YAAM,SAAS,KAAK,QAAQ,IAAI,CAAC,QAAQ,UAAU;AAElD,eAAO,KAAK,IAAI,GAAG,OAAO,UAAU,UAAQ,SAAS,OAAO,KAAK,CAAC,CAAC;AAAA,OACnE;AACD,WAAK,UAAU,MAAI;AAClB,aAAK,IAAI,MAAM,GAAG,EAAE,KAAK,SAAK;AAC7B,eAAK,MAAM,OAAO,UAAU,QAAO,IAAI;AAAA,SACvC;AAAA,OACD;AAAA,IACD;AAAA;AAAA,IAED,gBAAgB;AACf,YAAM,YAAY,KAAK,aAAa,KAAK;AAEzC,YAAM,UAAU,KAAK,iBAAkB,EAAC,IAAI,CAAC,WAAW,OAAO,OAAO,IAAI,CAAC,UAAU,UAAU,OAAO,MAAM,KAAK,CAAC,CAAC;AACnH,WAAK,UAAU;AAAA,IACf;AAAA,IACD,mBAAmB;AAElB,YAAM,UAAU,KAAK,UAAW,EAAC,IAAI,CAAC,EAAE,MAAM,YAAY;AACzD,YAAI,SAAS,MAAM,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,GAAG,CAAC,UAAU;AACtD,cAAI,QAAQ,MAAM,CAAC,IAAI;AACvB,kBAAQ,SAAS,SAAS,GAAG,KAAK,KAAK,KAAK,IAAI,QAAQ,KAAK;AAC7D,iBAAO;AAAA,SACP;AAED,YAAI,KAAK,QAAQ;AAChB,mBAAS,KAAK,OAAO,MAAM,MAAM;AAAA,QAClC;AACA,eAAO,EAAE,MAAM,OAAO;AAAA,OACtB;AACD,aAAO;AAAA,IACP;AAAA;AAAA,IAED,cAAc,OAAO,KAAK;AACzB,aAAO,MAAM,KAAK,IAAI,MAAM,MAAM,CAAC,EAAE,KAAM,CAAA,EAAE,MAAM,KAAK;AAAA,IACxD;AAAA;AAAA,IAED,aAAa,OAAO;AACnB,YAAM,aAAa,KAAK,SAAS;AACjC,UAAI,cAAc,CAAC,KAAK,IAAI,KAAK,KAAK,KAAK,GAAG;AAE7C,gBAAQ,KAAK;AAAA,iBACH,CAAC,cAAc,CAAC,OAAO;AAEjC,gBAAQ,GAAG,KAAK,IAAI,QAAQ,KAAK,OAAO,CAAC,IAAI,KAAK,IAAI,QAAQ,KAAK,SAAS,CAAC;AAAA,MAC9E;AAEA,UAAI,CAAC,YAAY;AAChB,YAAI,OAAO,KAAK,EAAE,QAAQ,GAAG,MAAM;AAAI,iBAAO,KAAK,IAAI,MAAM,mBAAmB;AAChF,YAAI,CAAC,MAAM,MAAM,IAAI,MAAM,MAAM,GAAG;AAEpC,eAAO,KAAK,IAAI,QAAQ,KAAK,IAAI,MAAM,KAAK,SAAS,KAAK,SAAS,OAAO,IAAI,CAAC,CAAC;AAChF,iBAAS,KAAK,IAAI,QAAQ,KAAK,IAAI,MAAM,KAAK,WAAW,KAAK,WAAW,OAAO,MAAM,CAAC,CAAC;AACxF,eAAO,GAAI,QAAU,MAAK;AAAA,aACpB;AAEN,gBAAQA,cAAK,QAAC,KAAK,EAAE,SAASA,cAAAA,QAAM,KAAK,OAAO,CAAC,IAAI,KAAK,UAAU;AACpE,gBAAQA,cAAK,QAAC,KAAK,EAAE,QAAQA,cAAAA,QAAM,KAAK,OAAO,CAAC,IAAI,KAAK,UAAU;AACnE,eAAO;AAAA,MACR;AAAA,IACA;AAAA;AAAA,IAED,YAAY;AACX,UAAI,KAAK,SAAS,QAAQ;AACzB,eAAO,CAAC;AAAA,UACP,MAAM;AAAA,UACN,OAAO,CAAC,KAAK,SAAS,KAAK,OAAO;AAAA,QACnC,GAAG;AAAA,UACF,MAAM;AAAA,UACN,OAAO,CAAC,KAAK,WAAW,KAAK,SAAS;AAAA,QACvC;MACD;AACA,YAAM,EAAE,SAAS,SAAS,UAAU,SAAS,cAAe,KAAK,YAAY,OAAO,KAAK,UAAU;AACnG,YAAM,EAAE,SAAS,SAAS,UAAU,SAAS,cAAe,KAAK,YAAY,OAAO,KAAK,UAAU;AACnG,YAAM,SAAS,CAAC;AAAA,QACf,MAAM;AAAA,QACN,OAAO,CAAC,SAAS,OAAO;AAAA,MACzB,GAAG;AAAA,QACF,MAAM;AAAA,QACN,OAAO,CAAC,UAAU,QAAQ;AAAA,MAC3B,GAAG;AAAA,QACF,MAAM;AAAA,QACN,OAAO,CAAC,SAAS,OAAO;AAAA,MACzB,GAAG;AAAA,QACF,MAAM;AAAA,QACN,OAAO,CAAC,SAAS,OAAO;AAAA,MACzB,GAAG;AAAA,QACF,MAAM;AAAA,QACN,OAAO,CAAC,WAAW,SAAS;AAAA,MAC7B;AACA,UAAI,KAAK,SAAS;AAAQ,eAAO,OAAO,GAAG,CAAC;AAC5C,UAAI,KAAK,SAAS;AAAc,eAAO,OAAO,GAAG,CAAC;AAClD,UAAI,KAAK,SAAS;AAAQ,eAAO,OAAO,GAAG,CAAC;AAC5C,aAAO;AAAA,IACP;AAAA;AAAA,IAED,YAAY,MAAM,YAAY;AAC7B,YAAM,QAAQ,IAAI,KAAK,UAAU;AACjC,YAAM,WAAW,IAAI,KAAK,KAAK,GAAG,IAAI,MAAM,CAAC;AAC7C,YAAM,OAAOA,cAAAA,QAAM,QAAQ,EAAE,KAAK;AAClC,UAAI,QAAQ;AACZ,UAAI,OAAO;AACX,UAAI,OAAO;AACX,UAAI,SAAS;AACb,UAAI,SAAS,OAAO;AACnB,gBAAQ;AAER,eAAOA,cAAK,QAAC,KAAK,EAAE,YAAY;AAChC,eAAO;AACP,iBAAS;AAAA,MACV;AAEA,UAAIA,cAAK,QAAC,KAAK,EAAE,KAAI,MAAO,MAAM;AACjC,gBAAQA,cAAAA,QAAM,QAAQ,EAAE,MAAM,IAAI;AAClC,YAAIA,cAAAA,QAAM,KAAK,EAAE,MAAK,IAAK,MAAM,OAAO;AACvC,iBAAOA,cAAK,QAAC,QAAQ,EAAE,KAAK;AAC5B,cAAIA,cAAK,QAAC,KAAK,EAAE,KAAI,MAAO,MAAM;AACjC,mBAAOA,cAAK,QAAC,QAAQ,EAAE,KAAK;AAC5B,gBAAIA,cAAK,QAAC,KAAK,EAAE,KAAI,MAAO,MAAM;AACjC,uBAASA,cAAK,QAAC,QAAQ,EAAE,OAAO;AAAA,YACjC;AAAA,UACD;AAAA,QACD;AAAA,MACD;AACA,aAAO;AAAA,QACN,CAAC,GAAG,IAAI,MAAM,GAAG;AAAA,QACjB,CAAC,GAAG,IAAI,OAAO,GAAG;AAAA,QAClB,CAAC,GAAG,IAAI,MAAM,GAAG;AAAA,QACjB,CAAC,GAAG,IAAI,MAAM,GAAG;AAAA,QACjB,CAAC,GAAG,IAAI,QAAQ,GAAG;AAAA,MACpB;AAAA,IACA;AAAA,EACD;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChWD,GAAG,gBAAgB,SAAS;","x_google_ignoreList":[0]}