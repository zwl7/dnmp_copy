{"version":3,"file":"timeUtil.js","sources":["../../../../src/utils/timeUtil.ts"],"sourcesContent":["/**\n * 格式化时间\n * @param {number} time 时间戳\n * @param {string} cformat 格式化字符串\n * @returns {string} 格式化后的时间\n */\nexport function formatTimeBase(time, cformat) {\n  if (arguments.length == 0) {\n    return null\n  }\n  const format = cformat || '{y}-{m}-{d} {h}:{i}:{s} 星期{a}'\n  let date\n  if (typeof time === 'object' && time instanceof Date) {\n    date = time\n  } else {\n    if (typeof time === 'string' && /^[0-9]+$/.test(time)) {\n      time = parseInt(time)\n    }\n    if (typeof time === 'number' && time.toString().length === 10) {\n      time = time * 1000\n    }\n    date = new Date(time)\n  }\n  const formatObj = {\n    y: date.getFullYear(),\n    m: date.getMonth() + 1,\n    d: date.getDate(),\n    h: date.getHours(),\n    i: date.getMinutes(),\n    s: date.getSeconds(),\n    a: date.getDay(),\n  }\n  const time_str = format.replace(/{([ymdhisa])+}/g, (result, key) => {\n    let value = formatObj[key]\n    if (key === 'a') {\n      return ['日', '一', '二', '三', '四', '五', '六'][value]\n    }\n    return value.toString().padStart(2, '0')\n  })\n  return time_str\n}\n\n/**\n * 计算保险的时间\n * @param {number} startTimestamp 开始时间戳\n * @param {number} endTimestamp 结束时间戳\n * @returns {Object} 保险开始时间、保险开始日期、保险天数\n */\nexport function calculateInsurance(startTimestamp, endTimestamp) {\n  const now = Math.floor(Date.now() / 1000) // 当前时间戳（秒）\n  if (endTimestamp <= startTimestamp) {\n    throw new Error('End timestamp must be after start timestamp.')\n  }\n  let insuranceStart\n  if (startTimestamp > now) {\n    // 活动开始时间在未来，以活动开始时间的当天0点为准\n    const startDate = new Date(startTimestamp * 1000)\n    startDate.setUTCHours(0, 0, 0, 0)\n    insuranceStart = Math.floor(startDate.getTime() / 1000)\n  } else {\n    // 当前时间已超过活动开始时间，以当前时间的当天0点为准\n    const nowDate = new Date(now * 1000)\n    nowDate.setUTCHours(0, 0, 0, 0)\n    insuranceStart = Math.floor(nowDate.getTime() / 1000)\n  }\n  // 保险结束时间：活动结束时间的当天23:59:59\n  const endDate = new Date(endTimestamp * 1000)\n  endDate.setUTCHours(23, 59, 59, 999)\n  // 计算保险天数（向上取整）\n  const timeDiff = endDate.getTime() - insuranceStart * 1000\n  const insuranceDays = Math.ceil(timeDiff / (1000 * 60 * 60 * 24))\n\n  const insuranceStartDate = formatTimeBase(insuranceStart, '{y}-{m}-{d}')\n  return {\n    insuranceStart,\n    insuranceStartDate,\n    insuranceDays,\n  }\n}\n\n// 传入两个时间戳，返回两个时间戳之间的时间差，并转化为小时\nexport function timeDifference(time1, time2) {\n  const difference = time2 - time1\n  const hours = difference / 1000 / 60 / 60\n  return Math.ceil(hours)\n}\n// 根据年月获取该月的开始和结束时间\nexport const getMonthStartAndEnd = (year, month) => {\n  const startOfMonth = new Date(year, month - 1, 1)\n  const endOfMonth = new Date(year, month, 0)\n  startOfMonth.setHours(0, 0, 0, 0)\n  endOfMonth.setHours(23, 59, 59, 999)\n  return {\n    start: startOfMonth,\n    end: endOfMonth,\n  }\n}\n"],"names":[],"mappings":";AAMgB,SAAA,eAAe,MAAM,SAAS;AACxC,MAAA,UAAU,UAAU,GAAG;AAClB,WAAA;AAAA,EAAA;AAET,QAAM,SAAS,WAAW;AACtB,MAAA;AACJ,MAAI,OAAO,SAAS,YAAY,gBAAgB,MAAM;AAC7C,WAAA;AAAA,EAAA,OACF;AACL,QAAI,OAAO,SAAS,YAAY,WAAW,KAAK,IAAI,GAAG;AACrD,aAAO,SAAS,IAAI;AAAA,IAAA;AAEtB,QAAI,OAAO,SAAS,YAAY,KAAK,SAAS,EAAE,WAAW,IAAI;AAC7D,aAAO,OAAO;AAAA,IAAA;AAET,WAAA,IAAI,KAAK,IAAI;AAAA,EAAA;AAEtB,QAAM,YAAY;AAAA,IAChB,GAAG,KAAK,YAAY;AAAA,IACpB,GAAG,KAAK,SAAA,IAAa;AAAA,IACrB,GAAG,KAAK,QAAQ;AAAA,IAChB,GAAG,KAAK,SAAS;AAAA,IACjB,GAAG,KAAK,WAAW;AAAA,IACnB,GAAG,KAAK,WAAW;AAAA,IACnB,GAAG,KAAK,OAAO;AAAA,EACjB;AACA,QAAM,WAAW,OAAO,QAAQ,mBAAmB,CAAC,QAAQ,QAAQ;AAC9D,QAAA,QAAQ,UAAU,GAAG;AACzB,QAAI,QAAQ,KAAK;AACR,aAAA,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,GAAG,EAAE,KAAK;AAAA,IAAA;AAElD,WAAO,MAAM,SAAA,EAAW,SAAS,GAAG,GAAG;AAAA,EAAA,CACxC;AACM,SAAA;AACT;AAyCgB,SAAA,eAAe,OAAO,OAAO;AAC3C,QAAM,aAAa,QAAQ;AACrB,QAAA,QAAQ,aAAa,MAAO,KAAK;AAChC,SAAA,KAAK,KAAK,KAAK;AACxB;AAEa,MAAA,sBAAsB,CAAC,MAAM,UAAU;AAClD,QAAM,eAAe,IAAI,KAAK,MAAM,QAAQ,GAAG,CAAC;AAChD,QAAM,aAAa,IAAI,KAAK,MAAM,OAAO,CAAC;AAC1C,eAAa,SAAS,GAAG,GAAG,GAAG,CAAC;AAChC,aAAW,SAAS,IAAI,IAAI,IAAI,GAAG;AAC5B,SAAA;AAAA,IACL,OAAO;AAAA,IACP,KAAK;AAAA,EACP;AACF;;;;"}