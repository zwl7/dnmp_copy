{"version":3,"file":"index.js","sources":["../../../../src/utils/index.ts"],"sourcesContent":["import { pages, subPackages, tabBar } from '@/pages.json'\nimport { isMp } from './platform'\nimport mpImageCompress from '@/utils/image-compress'\n\nconst getLastPage = () => {\n  // getCurrentPages() 至少有1个元素，所以不再额外判断\n  // const lastPage = getCurrentPages().at(-1)\n  // 上面那个在低版本安卓中打包回报错，所以改用下面这个【虽然我加了src/interceptions/prototype.ts，但依然报错】\n  const pages = getCurrentPages()\n  return pages[pages.length - 1]\n}\n\n/** 判断当前页面是否是tabbar页  */\nexport const getIsTabbar = () => {\n  if (!tabBar) {\n    return false\n  }\n  if (!tabBar.list.length) {\n    // 通常有tabBar的话，list不能有空，且至少有2个元素，这里其实不用处理\n    return false\n  }\n  const lastPage = getLastPage()\n  const currPath = lastPage.route\n  return !!tabBar.list.find((e) => e.pagePath === currPath)\n}\n\n/**\n * 获取当前页面路由的 path 路径和 redirectPath 路径\n * path 如 ‘/pages/login/index’\n * redirectPath 如 ‘/pages/demo/base/route-interceptor’\n */\nexport const currRoute = () => {\n  const lastPage = getLastPage()\n  const currRoute = (lastPage as any).$page\n  // console.log('lastPage.$page:', currRoute)\n  // console.log('lastPage.$page.fullpath:', currRoute.fullPath)\n  // console.log('lastPage.$page.options:', currRoute.options)\n  // console.log('lastPage.options:', (lastPage as any).options)\n  // 经过多端测试，只有 fullPath 靠谱，其他都不靠谱\n  const { fullPath } = currRoute as { fullPath: string }\n  // console.log(fullPath)\n  // eg: /pages/login/index?redirect=%2Fpages%2Fdemo%2Fbase%2Froute-interceptor (小程序)\n  // eg: /pages/login/index?redirect=%2Fpages%2Froute-interceptor%2Findex%3Fname%3Dfeige%26age%3D30(h5)\n  return getUrlObj(fullPath)\n}\n\nconst ensureDecodeURIComponent = (url: string) => {\n  if (url.startsWith('%')) {\n    return ensureDecodeURIComponent(decodeURIComponent(url))\n  }\n  return url\n}\n/**\n * 解析 url 得到 path 和 query\n * 比如输入url: /pages/login/index?redirect=%2Fpages%2Fdemo%2Fbase%2Froute-interceptor\n * 输出: {path: /pages/login/index, query: {redirect: /pages/demo/base/route-interceptor}}\n */\nexport const getUrlObj = (url: string) => {\n  const [path, queryStr] = url.split('?')\n  // console.log(path, queryStr)\n\n  if (!queryStr) {\n    return {\n      path,\n      query: {},\n    }\n  }\n  const query: Record<string, string> = {}\n  queryStr.split('&').forEach((item) => {\n    const [key, value] = item.split('=')\n    // console.log(key, value)\n    query[key] = ensureDecodeURIComponent(value) // 这里需要统一 decodeURIComponent 一下，可以兼容h5和微信y\n  })\n  return { path, query }\n}\n/**\n * 得到所有的需要登录的pages，包括主包和分包的\n * 这里设计得通用一点，可以传递key作为判断依据，默认是 needLogin, 与 route-block 配对使用\n * 如果没有传 key，则表示所有的pages，如果传递了 key, 则表示通过 key 过滤\n */\nexport const getAllPages = (key = 'needLogin') => {\n  // 这里处理主包\n  const mainPages = [\n    ...pages\n      .filter((page) => !key || page[key])\n      .map((page) => ({\n        ...page,\n        path: `/${page.path}`,\n      })),\n  ]\n  // 这里处理分包\n  const subPages: any[] = []\n  subPackages.forEach((subPageObj) => {\n    // console.log(subPageObj)\n    const { root } = subPageObj\n\n    subPageObj.pages\n      .filter((page) => !key || page[key])\n      .forEach((page: { path: string } & Record<string, any>) => {\n        subPages.push({\n          ...page,\n          path: `/${root}/${page.path}`,\n        })\n      })\n  })\n  const result = [...mainPages, ...subPages]\n  return result\n}\n\n/**\n * 得到所有的需要登录的pages，包括主包和分包的\n * 只得到 path 数组\n */\nexport const getNeedLoginPages = (): string[] => getAllPages('needLogin').map((page) => page.path)\n\n/**\n * 得到所有的需要登录的pages，包括主包和分包的\n * 只得到 path 数组\n */\nexport const needLoginPages: string[] = getAllPages('needLogin').map((page) => page.path)\n\n/**\n * 根据微信小程序当前环境，判断应该获取的BaseUrl\n */\nexport const getEvnBaseUrl = () => {\n  // 请求基准地址\n  let baseUrl = import.meta.env.VITE_SERVER_BASEURL\n  return baseUrl\n}\n\n/**\n * 根据微信小程序当前环境，判断应该获取的UPLOAD_BASEURL\n */\nexport const getEvnBaseUploadUrl = () => {\n  // 请求基准地址\n  let baseUploadUrl = import.meta.env.VITE_UPLOAD_BASEURL\n  return baseUploadUrl\n}\n\nexport const getMapLocation = () => {\n  let lat = import.meta.env.VITE_MAP_LAT\n  let lng = import.meta.env.VITE_MAP_LNG\n  return { lat, lng }\n}\n\n/**\n * 根据微信小程序当前环境，判断应该获取的公司id\n */\nexport const getEvnCompanyID = () => {\n  let company_id = import.meta.env.VITE_COMPANY_ID\n  // 小程序端环境区分\n  if (isMp) {\n    const {\n      miniProgram: { envVersion },\n    } = uni.getAccountInfoSync()\n    switch (envVersion) {\n      case 'develop':\n        break\n      case 'trial':\n        break\n      case 'release':\n        break\n    }\n  }\n  return company_id\n}\n\nimport _get from 'lodash/get'\n\n/**\n * @desc 使用async await 进项进行延时操作\n * @param {*} time\n */\nexport function sleep(time = 1000) {\n  return new Promise((resolve) => {\n    setTimeout(() => resolve(true), time)\n  })\n}\n\n/**\n * 使用indexof方法实现模糊查询\n * @param  {Array}  list     进行查询的数组\n * @param  {String} keyWord  查询的关键词\n * @return {Array}           查询的结果\n */\nexport function fuzzyQuery(list, keyWord, { keyName = '' } = {}) {\n  const arr = []\n  for (let i = 0; i < list.length; i++) {\n    const str = keyName ? list[i][keyName] : list[i]\n    if (str.includes(keyWord)) {\n      arr.push(list[i])\n    }\n  }\n  return arr\n}\n\n/**\n * 解构对象属性为可响应的计算属性\n * @param  values 为对象时 对象的值作为计算属性的替换键名\n * @param {String} sourcePath 默认值为 '$Route.query'\n * @returns {Object} Computeds\n */\nexport function mapComputed(keys = [], sourcePath = '$Route.query') {\n  const arr = Array.isArray(keys) ? keys.map((name) => [name, name]) : Object.entries(keys)\n  const computeds = arr.reduce((obj, [name, replaceName]) => {\n    if (!replaceName) replaceName = name\n    const formatPath = [...sourcePath.split('.'), name].join('.')\n    obj[replaceName] = function () {\n      return _get(this, formatPath)\n    }\n    return obj\n  }, {})\n  return computeds\n}\n\n// 字典映射\nexport const mapDict = function (\n  data,\n  { childrenName = 'children', keyName = 'value', valueName = 'label', mapValue: any } = {},\n) {\n  return data.reduce((obj, item) => {\n    const key = item[keyName]\n    const value = mapValue ? mapValue(item) : item[valueName]\n    obj[key] = value\n    if (Array.isArray(item[childrenName])) {\n      obj = {\n        ...obj,\n        ...mapDict(item[childrenName], {\n          childrenName,\n          keyName,\n          valueName,\n          mapValue,\n        }),\n      }\n    }\n    return obj\n  }, {})\n}\n\n/**\n * 去除富文本标签\n * @param {*} value 富文本\n * @returns\n */\nexport function removeTag(value) {\n  return value\n    .replace(/<[^>]+>/g, '')\n    .replace(/&nbsp;/g, '')\n    .replace(/&ldquo;/g, '')\n    .replace(/&rdquo;/g, '')\n}\n\n/**\n * 根据身份证号判断男女\n */\nexport function getSexText(idCardNo) {\n  const gender = idCardNo?.substr(-2, 1)\n  if (gender % 2 === 1) {\n    return '男'\n  }\n  return '女'\n}\n\n// 预览图片\nexport function previewImage(url) {\n  uni.previewImage({\n    urls: [url],\n    longPressActions: {\n      success: function (data) {\n        console.log(data)\n      },\n      fail: function (err) {\n        console.log(err.errMsg)\n      },\n    },\n  })\n}\n\nexport const chooseImage = function (canvasId) {\n  return new Promise((resolve, reject) => {\n    uni.chooseImage({\n      count: 1, //默认9\n      sizeType: ['original', 'compressed'], //可以指定是原图还是压缩图，默认二者都有\n      success: async (res) => {\n        const fileName = res.tempFiles[0].name\n        const fileSize = res.tempFiles[0].size\n        console.log('fileName:', res)\n        const url = res.tempFiles[0].path\n        mpImageCompress.clearTempImg()\n        let fileInfo = await mpImageCompress.set(url, 1024 * 2, true)\n        let filePath = fileInfo.filePath\n        resolve({ file: filePath, status: true })\n      },\n    })\n  })\n}\n\nexport const formatRichText = function (html, tip = '') {\n  html = html ? html : ''\n  let newContent = ''\n  newContent = html.replace(/<img[^>]*>/gi, function (match) {\n    match = match.replace(`style=\"\"`, '')\n    match = match.replace(/style=\"[^\"]+\"/gi, '').replace(/style='[^']+'/gi, '')\n    match = match.replace(/width=\"[^\"]+\"/gi, '').replace(/width='[^']+'/gi, '')\n    match = match.replace(/height=\"[^\"]+\"/gi, '').replace(/height='[^']+'/gi, '')\n    return match\n  })\n  newContent = newContent.replace(/style=\"[^\"]+\"/gi, function (match) {\n    match = match\n      .replace(/width:[^;]+;/gi, 'max-width:100%;')\n      .replace(/width:[^;]+;/gi, 'max-width:100%;')\n    return match\n  })\n  newContent = newContent.replace(/<br[^>]*\\/>/gi, '')\n  newContent = newContent.replace(\n    /\\<img/gi,\n    '<img style=\"max-width:100%;height:auto;display:inline-block;margin:10rpx auto;\"',\n  )\n  if (!newContent) {\n    return tip\n  }\n  return newContent\n}\n\n// 获取网络地址参数\nexport function parseQueryParams(queryString) {\n  if (queryString.indexOf('?') !== -1) {\n    queryString = queryString.split('?')[1]\n  }\n  var params = {}\n  if (!queryString) {\n    return params\n  }\n  var pairs = queryString.split('&')\n  for (var i = 0; i < pairs.length; i++) {\n    var pair = pairs[i].split('=')\n    var name = decodeURIComponent(pair[0])\n    var value = pair.length > 1 ? decodeURIComponent(pair[1]) : ''\n    params[name] = value\n  }\n  return params\n}\n\n// 对象转字符串\nexport function objectToQueryString(obj) {\n  const params: any = Object.entries(obj)\n  const encodedParams = params.map(\n    ([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`,\n  )\n  return encodedParams.join('&')\n}\n"],"names":["isMp","uni","mpImageCompress"],"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"}