user  nginx;

# 场景 1：静态资源服务器（IO 密集型）：
# worker_processes = CPU核心数 × 2
# worker_connections = 32768 ~ 65535（需配合 ulimit -n 和内存评估）
# 场景 2：反向代理或动态请求（CPU 密集型）：
# worker_processes = CPU核心数
# worker_connections = 16384 ~ 32768（减少连接数，避免 CPU 过载）
worker_processes  8;

pid        /var/run/nginx.pid;
error_log  /var/log/nginx/nginx.error.log warn;

events {
    worker_connections  30000;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # 使用map指令标记IP是否在白名单中
    map $remote_addr $limit_key {
        default $binary_remote_addr;
        "192.168.1.100" ""; # 白名单ipv4
        "2001:db8::1" "";  # 白名单ipv6
        # 可以继续添加更多白名单 IP
    }

    # 定义请求频率限制区域（仅对非白名单IP生效）
    limit_req_zone $limit_key zone=non_white_req:20m rate=50r/s;

    # 正确格式示例
    limit_conn_zone $limit_key zone=non_white_conn:20m;  # 注意冒号和单位m的正确性

    server_tokens  off; # hide verson string 隐藏版本号
    sendfile        on; #这个指令启用高效的文件传输。sendfile 是一种优化文件传输的方法，它允许 Nginx 在内核中直接将文件传输到网络套接字，而无需经过用户空间。这样可以提高静态文件（如图像、CSS 和 JavaScript 文件）的传输性能。
    client_max_body_size 500M;
    keepalive_timeout  65;
    send_timeout 600;

    client_header_buffer_size 32k;
    large_client_header_buffers 16 128k;
    gzip  on;
    gzip_min_length 1k;
    gzip_buffers 4 16k;
    gzip_comp_level 2;
    gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-htt
    gzip_vary off;
    gzip_disable "MSIE [1-6]\.";

    # 日志按天分割
    log_format main '[$time_iso8601] $remote_addr $remote_user '
                        '"$request" $status $body_bytes_sent '
                        '"$http_referer" "$http_user_agent" '
                        '$request_time $upstream_response_time '  # 请求总时间和上游响应时间
                        '$request_length $bytes_sent '  # 请求大小和响应大小
                        '"$http_x_forwarded_for" "$http_x_real_ip" '  # 真实客户端IP
                        '$scheme $http_host $server_name';  # 协议、域名和服务器名'
    map $time_iso8601 $logdate {
        '~^(?<ymd>\d{4}-\d{2}-\d{2})' $ymd;
        default 'date-not-found';
    }

    access_log /var/log/nginx/access/$logdate.log main;

    # 每天凌晨压缩昨天的 
    # 0 1 * * * gzip /var/log/nginx/access-$(date -d 'yesterday' +\%Y-\%m-\%d).log
    # 每月清理30天前的
    # 0 1 * * * find /var/log/nginx/ -name "access-*.log.gz" -mtime +30 -delete

    error_log  /var/log/nginx/nginx.error.log  warn;
    include /etc/nginx/conf.d/*.conf;
}
